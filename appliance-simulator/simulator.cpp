#include <unistd.h>
#include <stdio.h>
#include <termios.h>
#include <fcntl.h>
#include <time.h>
#include <string.h>

static const unsigned short crc16tab[256]= {
	0x0000,0x1021,0x2042,0x3063,0x4084,0x50a5,0x60c6,0x70e7,
	0x8108,0x9129,0xa14a,0xb16b,0xc18c,0xd1ad,0xe1ce,0xf1ef,
	0x1231,0x0210,0x3273,0x2252,0x52b5,0x4294,0x72f7,0x62d6,
	0x9339,0x8318,0xb37b,0xa35a,0xd3bd,0xc39c,0xf3ff,0xe3de,
	0x2462,0x3443,0x0420,0x1401,0x64e6,0x74c7,0x44a4,0x5485,
	0xa56a,0xb54b,0x8528,0x9509,0xe5ee,0xf5cf,0xc5ac,0xd58d,
	0x3653,0x2672,0x1611,0x0630,0x76d7,0x66f6,0x5695,0x46b4,
	0xb75b,0xa77a,0x9719,0x8738,0xf7df,0xe7fe,0xd79d,0xc7bc,
	0x48c4,0x58e5,0x6886,0x78a7,0x0840,0x1861,0x2802,0x3823,
	0xc9cc,0xd9ed,0xe98e,0xf9af,0x8948,0x9969,0xa90a,0xb92b,
	0x5af5,0x4ad4,0x7ab7,0x6a96,0x1a71,0x0a50,0x3a33,0x2a12,
	0xdbfd,0xcbdc,0xfbbf,0xeb9e,0x9b79,0x8b58,0xbb3b,0xab1a,
	0x6ca6,0x7c87,0x4ce4,0x5cc5,0x2c22,0x3c03,0x0c60,0x1c41,
	0xedae,0xfd8f,0xcdec,0xddcd,0xad2a,0xbd0b,0x8d68,0x9d49,
	0x7e97,0x6eb6,0x5ed5,0x4ef4,0x3e13,0x2e32,0x1e51,0x0e70,
	0xff9f,0xefbe,0xdfdd,0xcffc,0xbf1b,0xaf3a,0x9f59,0x8f78,
	0x9188,0x81a9,0xb1ca,0xa1eb,0xd10c,0xc12d,0xf14e,0xe16f,
	0x1080,0x00a1,0x30c2,0x20e3,0x5004,0x4025,0x7046,0x6067,
	0x83b9,0x9398,0xa3fb,0xb3da,0xc33d,0xd31c,0xe37f,0xf35e,
	0x02b1,0x1290,0x22f3,0x32d2,0x4235,0x5214,0x6277,0x7256,
	0xb5ea,0xa5cb,0x95a8,0x8589,0xf56e,0xe54f,0xd52c,0xc50d,
	0x34e2,0x24c3,0x14a0,0x0481,0x7466,0x6447,0x5424,0x4405,
	0xa7db,0xb7fa,0x8799,0x97b8,0xe75f,0xf77e,0xc71d,0xd73c,
	0x26d3,0x36f2,0x0691,0x16b0,0x6657,0x7676,0x4615,0x5634,
	0xd94c,0xc96d,0xf90e,0xe92f,0x99c8,0x89e9,0xb98a,0xa9ab,
	0x5844,0x4865,0x7806,0x6827,0x18c0,0x08e1,0x3882,0x28a3,
	0xcb7d,0xdb5c,0xeb3f,0xfb1e,0x8bf9,0x9bd8,0xabbb,0xbb9a,
	0x4a75,0x5a54,0x6a37,0x7a16,0x0af1,0x1ad0,0x2ab3,0x3a92,
	0xfd2e,0xed0f,0xdd6c,0xcd4d,0xbdaa,0xad8b,0x9de8,0x8dc9,
	0x7c26,0x6c07,0x5c64,0x4c45,0x3ca2,0x2c83,0x1ce0,0x0cc1,
	0xef1f,0xff3e,0xcf5d,0xdf7c,0xaf9b,0xbfba,0x8fd9,0x9ff8,
	0x6e17,0x7e36,0x4e55,0x5e74,0x2e93,0x3eb2,0x0ed1,0x1ef0
};
  
unsigned short crc16_xmodem(const unsigned char *buf, int len)
{
	int counter;
	unsigned short crc = 0;
	for( counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *buf++)&0x00FF];
	return crc;
}

void tx(int fd, unsigned char a, unsigned char b, unsigned char c, const unsigned char *data, int len)
{
	unsigned char buf[300];
	int nb=0;
	buf[nb++] = 0x04;
	buf[nb++] = 0x00;
	buf[nb++] = 0x00;
	buf[nb++] = 0x00;
	buf[nb++] = 0x87;
	buf[nb++] = a;
	buf[nb++] = b;
	buf[nb++] = c;
	buf[nb++] = len;
	memcpy(buf+nb, data, len);
	nb+=len;
	auto rv = crc16_xmodem(buf, nb);
	buf[nb++] = rv>>8;
	buf[nb++] = rv&0xff;
	write(fd, buf, nb);
	printf("TX: ");
	for(int i=0;i<nb;i++)
		printf("%02x ", buf[i]);
	printf("\n");
}

void dump_tlv(const unsigned char *ptr, int nb)
{
	while(nb >= 2) {
		unsigned int tl = (ptr[0]<<8)|ptr[1];
		int l = (tl>>4)&3;
		unsigned int v = tl & 15;
		if(nb < 2 + l)
			break;

		if(l > 0) {
			v = 0;
			for(int i=0;i<l;i++)
				v = (v<<8)|ptr[2+i];
		}

		ptr += 2+l;
		nb -= 2+l;
		printf("\tT=%x V=%x\n", tl>>6, v);
	}

	if(nb > 0) {
		printf("\tTLV leftover bytes:");
		while(nb-- > 0)
			printf(" %02x", *ptr++);
	}
}

int main(int ac, char ** av)
{
	int fd = open(av[1], O_RDWR|O_NONBLOCK);
        struct termios t;
        tcgetattr(fd, &t);
        t.c_cflag = CS8 | CLOCAL | CREAD | B9600;
        t.c_iflag = IGNPAR;
        t.c_oflag = 0;
        t.c_lflag = 0;

        t.c_cc[VMIN] = 1;
        t.c_cc[VTIME] = 0;
        tcsetattr(fd, TCSANOW, &t);
	fcntl(fd, F_SETFL, 0);
	
	unsigned char buf[300];
	int nb=0;
	time_t t0 = time(NULL);

	int seq = 0x55;
	for(;;) {
		unsigned char c;
		if(read(fd, &c, 1) != 1)
			break;
		time_t t1 = time(NULL);
		if(t1-t0 > 1)
			nb=0;
		t0=t1;

		if(nb == 0) {
			if(c == 0x04) buf[nb++] = c;
			else nb = 0;

		} else if(nb == 1 || nb == 2 || nb == 3) {
			if(c == 0x00) buf[nb++] = c;
			else nb = 0;

		} else {
			buf[nb++] = c;
			if(nb == 11 + buf[8]) {
				printf("RX(%d) ", nb);
				for(int i=0;i<nb;i++)
					printf("%02x ", buf[i]);

				unsigned short rv = crc16_xmodem(buf, nb);
				printf(" crc=%02x\n", rv);

				if(rv == 0 && buf[4] == 0x65) {
					dump_tlv(buf+9, buf[8]);

					if(buf[5] == 0x01 || buf[5] == 0x02) {
						if(buf[6] == 0x01 || buf[6] == 0x04 /* ? */) {
							// send ack
							// FIXME: are we really supposed to send ack for 0x04-packets?
							tx(fd, buf[5], 0x10, buf[7], NULL, 0);
						}

						if(nb == 13 && buf[6] == 0x02 && !memcmp(buf+8, "\x02\x7d\x41", 3)) {
							// t=0x1f5 v=1, this asks to enumerate some properties
							const unsigned char resp[] = { 0xB0, 0x01, 0xB0, 0x50, 0x57, 0xB0, 0xA0, 0x01, 0x7C, 0xB0, 0xC1, 0xB1, 0x03, 0xB3, 0x06, 0xB3, 0x4F, 0xB4, 0xC7, 0xB5, 0x82, 0xB5, 0x41, 0xB5, 0x43, 0xB6, 0xA0, 0x4D, 0x81, 0xB6, 0xF0, 0x69, 0x04, 0x09, 0xB7, 0x01, 0xBC, 0x40, 0xBD, 0x47, 0xB5, 0xC0, 0xB6, 0x10, 0x24, 0xB6, 0x46, 0xB5, 0xC1, 0xB6, 0x00, 0xB6, 0x46, 0xB5, 0xC2, 0xB6, 0x00, 0xB6, 0x46, 0xB5, 0xC4, 0xB6, 0x10, 0x2C, 0xB6, 0x46, 0xB5, 0xC6, 0xB6, 0x10, 0x2C, 0xB6, 0x46 };
							tx(fd, buf[5], 0x01, ++seq, resp, sizeof(resp));
						}

						if(nb == 13 && buf[6] == 0x02 && !memcmp(buf+8, "\x02\x7d\x42", 3)) {
							// t=0x1f5 v=2, this asks to enumerate some properties
							const unsigned char resp[] = { 0x7E, 0x44, 0x7D, 0xC0, 0x7E, 0x86, 0x7F, 0x50, 0x29, 0x7F, 0x90, 0x2C, 0xC8, 0x40, 0xC8, 0x80, 0xC8, 0xC0, 0x83, 0x40, 0x83, 0x80, 0x83, 0xC0, 0x86, 0x80, 0x86, 0xC0, 0x87, 0x00, 0x87, 0xC0, 0x89, 0x40, 0x88, 0x40, 0x8A, 0x03, 0x8A, 0x50, 0x5C, 0x8A, 0x80, 0x8C, 0x80, 0x8C, 0xC0, 0xAC, 0xD0, 0x32, 0xD5, 0x40, 0xD5, 0x80, 0xC9, 0x00, 0xCA, 0xD0, 0x7F, 0xCB, 0x10, 0x5D, 0xCB, 0x40, 0xCB, 0x8C, 0xCB, 0xC0, 0xCC, 0x10, 0xCC, 0xCC, 0x40, 0xCC, 0x90, 0x5D, 0x8B, 0x40, 0xBF, 0x60, 0x04, 0xE3, 0xBF, 0xE0, 0x02, 0x71, 0xBF, 0xA0, 0x04, 0xE3, 0xC0, 0x20, 0x02, 0x71, 0xBE, 0x50, 0x7F, 0xBE, 0x90, 0x7E, 0x1B, 0x00, 0xBE, 0xC0, 0xC3, 0x00, 0xC3, 0x40, 0xC0, 0xC0, 0xC3, 0x80 };

							tx(fd, buf[5], 0x01, ++seq, resp, sizeof(resp));
							
							tx(fd, 0x02, 0x04, ++seq, (const unsigned char*)"\xca\xd0\x7f", 3);
						}
					}
				}
				nb = 0;
			}
		}
	}
}
